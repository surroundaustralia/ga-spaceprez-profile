PREFIX dcat: <http://www.w3.org/ns/dcat#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX geosh: <http://www.opengis.net/def/geosparql/validator/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

<https://w3id.org/profile/spaceprez/compounded-validator>
    a owl:Ontology ;
    skos:prefLabel "SpacePrez Compound Validator"@en ;
    skos:definition "Compounded SHACL validator for the SpacePrez Profile. This validator contains GeoSPARQL, OGC LD API Profile and SpacePrez Profile validators all in one"@en ;
    dcterms:creator <https://linked.data.gov.au/org/surround> ;
    dcterms:publisher <https://linked.data.gov.au/org/surround> ;
    dcterms:created "2022-03-22"^^xsd:date ;
    dcterms:modified "2022-03-22"^^xsd:date ;
    owl:versionIRI <https://w3id.org/profile/spaceprez/compounded-validator/2.0>
.

#
#   SpacePrez Validator
#

<https://w3id.org/profile/spaceprez/validator/geojson>
	a sh:NodeShape ;
	sh:targetClass geo:Geometry ;
	sh:targetObjectsOf geo:hasGeometry , geo:hasDefaultGeometry , geo:defaultGeometry ;
	sh:targetSubjectsOf geo:asWKT , geo:asGML , geo:asGeoJSON , geo:asKML , geo:asDGGS , geo:hasSerialization ;
    sh:property [
        sh:path geo:asGeoJSON ;
        sh:minCount 1 ;
        sh:datatype geo:geoJSONLiteral ;
        sh:message "Requirement GJ: All GeoSPARQL Geometry objects must contain a GeoJSON serialization"@en ;
    ] ;
.

#
#   OGC LD API Validator
#

#
#   Dataset
#
<https://data.surroundaustralia.com/def/olapapi/requirement/d-title>
	a sh:NodeShape ;
	sh:targetClass dcat:Dataset ;
    sh:message "Requirement D-title: Each Dataset MUST have one and only one English title which is an English text literal, indicated using the dcterms:title predicate"@en ;
    sh:property [
        sh:path dcterms:title ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype rdf:langString ;
        sh:languageIn ("en") ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/d-desc>
	a sh:NodeShape ;
	sh:targetClass dcat:Dataset ;
    sh:message "Requirement D-defn: Each Dataset MUST have one and only one English description which is an English text literal, indicated using the dcterms:description predicate"@en ;
    sh:property [
        sh:path dcterms:description ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype rdf:langString ;
        sh:languageIn ("en") ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/d-id>
	a sh:NodeShape ;
	sh:targetClass dcat:Dataset ;
    sh:message "Requirement D-id: Each Dataset MUST have one and only one identifier, an xsd:token, indicated using the dcterms:identifier predicate. Note: this identifier must be unique within the Dataset it is part of. This uniqueness is not testable in SHACL"@en ;
    sh:property [
        sh:path dcterms:identifier ;
        sh:minCount 1 ;
        sh:datatype xsd:token ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/d-members>
	a sh:NodeShape ;
	sh:targetClass dcat:Dataset ;
    sh:message "Requirement D-members: If a Dataset has a member, indicated by rdfs:member, it must be of type geo:FeatureCollection"@en ;
    sh:property [
        sh:path rdfs:member ;
        sh:class geo:FeatureCollection ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/d-bb>
	a sh:NodeShape ;
	sh:targetClass geo:Dataset ;
    sh:message "Requirement D-bb: A Dataset SHOULD indicate a maximum of one Bounding Box geometry with a geo:hasBoundingBox predicate"@en ;
    sh:property [
        sh:path geo:hasBoundingBox ;
        sh:class geo:Geometry ;
        sh:maxCount 1;
    ]
.

#
#   FeatureCollection
#
<https://data.surroundaustralia.com/def/olapapi/requirement/fc-title>
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-title: Each Feature Collection MUST have one and only one English title which is an English text literal, indicated using the dcterms:title predicate"@en ;
    sh:property [
        sh:path dcterms:title ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype rdf:langString ;
        sh:languageIn ("en") ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/fc-desc>
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-defn: Each Feature Collection MUST have one and only one English definition which is an English text literal, indicated using the dcterms:description predicate"@en ;
    sh:property [
        sh:path dcterms:description ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype rdf:langString ;
        sh:languageIn ("en") ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/fc-id>
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-id: Each Feature Collection MUST have one and only one identifier, an xsd:token, indicated using the dcterms:identifier predicate. Note: this identifier must be unique within the Dataset it is part of. This uniqueness is not testable in SHACL"@en ;
    sh:property [
        sh:path dcterms:identifier ;
        sh:minCount 1 ;
        sh:datatype xsd:token ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/fc-bb>
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-bb: A Feature Collection SHOULD indicate a maximum of one Bounding Box geometry with a geo:hasBoundingBox predicate"@en ;
    sh:property [
        sh:path geo:hasBoundingBox ;
        sh:class geo:Geometry ;
        sh:maxCount 1;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/fc-members>
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-members: A Feature Collection must have at least one member and all members must be type geo:Feature"@en ;
    sh:property [
        sh:path rdfs:member ;
        sh:minCount 1 ;
        sh:class geo:Feature ;
    ]
.


#
#   Feature
#
<https://data.surroundaustralia.com/def/olapapi/requirement/f-id>
	a sh:NodeShape ;
	sh:targetClass geo:Feature ;
    sh:message "Requirement F-id: Each Feature MUST have one and only one identifier, an xsd:token, indicated using the dcterms:identifier predicate. Note: this identifier must be unique within the Dataset it is part of. This uniqueness is not testable in SHACL"@en ;
    sh:property [
        sh:path dcterms:identifier ;
        sh:minCount 1 ;
        sh:datatype xsd:token ;
    ]
.

<https://data.surroundaustralia.com/def/olapapi/requirement/f-partof>
	a sh:NodeShape ;
	sh:targetClass geo:Feature ;
    sh:message "Requirement F-part: Each Feature MAY indicate that it is part of at least one geo:FeatureCollection with use of the dcterms:isPartOf predicate. If not provided, this property will be calculated using any indications of FeatureCollection membership of a Feature made with rdfs:member"@en ;
    sh:property [
        sh:path dcterms:isPartOf ;
        sh:class geo:FeatureCollection ;
    ]
.

# TODO: consider other, specialised, hasGeometry properties, such as hasCentroid
<https://data.surroundaustralia.com/def/olapapi/requirement/f-hasgeometry>
	a sh:NodeShape ;
	sh:targetClass geo:Feature ;
    sh:message "Requirement F-geometry: Each Feature MUST indicate that it has at least one geo:Geometry with use of the geo:hasGeometry predicate"@en ;
    sh:property [
        sh:path geo:hasGeometry ;
        sh:minCount 1 ;
        sh:class geo:Geometry ;
    ]
.

#
#   GeoSPARQL 1.1 Validator
#

#################################################
# Shape 1 (1a-1d) - geometry serialization uniqueness
#################################################

geosh:S1-hasGeometry-hasSerialization
    a sh:NodeShape ;
	sh:targetClass geo:Geometry ;
	sh:targetObjectsOf
		geo:hasGeometry ,
		geo:hasDefaultGeometry ,
		geo:defaultGeometry ;
	sh:targetSubjectsOf
		geo:asWKT ,
		geo:asGML ,
		geo:asGeoJSON ,
		geo:asKML ,
		geo:asDGGS ;
	sh:property
		geosh:S1-a-hasGeometry-hasSerialization-sub ,
		geosh:S1-b-hasGeometry-hasSerialization-sub ,
		geosh:S1-c-hasGeometry-hasSerialization-sub ,
		geosh:S1-d-hasGeometry-hasSerialization-sub ,
		geosh:S1-e-hasGeometry-hasSerialization-sub ;
.

geosh:S1-a-hasGeometry-hasSerialization-sub
	a sh:PropertyShape ;
	sh:path geo:asWKT ;
	sh:maxCount 1 ;
	sh:message "Each Geometry node can have a maximum of one outgoing geo:asWKT relation."@en ;
	skos:example
		"""
		# A valid example: incoming into the Geometry Blank Node is geo:hasGeometry, outgoing is one geo:asWKT relation
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ,
		"""
		# A valid example: incoming to the Geometry blank node is geo:hasGeometry, outgoing is one geo:asWKT relation. RDF treats both entries as one triple since they are identical.
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ,
		"""
		# An invalid example: incoming to the Geometry blank node is geo:hasGeometry, outgoing are two geo:asWKT relations
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
				geo:asWKT "POINT (153.08 -27.32)"^^geo:wktLiteral ;
			] ;
		.
		""" ;
.

geosh:S1-b-hasGeometry-hasSerialization-sub
	a sh:PropertyShape ;
	sh:path geo:asGML ;
	sh:maxCount 1 ;
	sh:message "Each Geometry node can have a maximum of one outgoing geo:asGML relation."@en ;
.

geosh:S1-c-hasGeometry-hasSerialization-sub
	a sh:PropertyShape ;
	sh:path geo:asGeoJSON ;
	sh:maxCount 1 ;
	sh:message "Each Geometry node can have a maximum of one outgoing geo:asGeoJSON relation."@en ;
.

geosh:S1-d-hasGeometry-hasSerialization-sub
	a sh:PropertyShape ;
	sh:path geo:asKML ;
	sh:maxCount 1 ;
	sh:message "Each Geometry node can have a maximum of one outgoing geo:asKML relation."@en ;
.

geosh:S1-e-hasGeometry-hasSerialization-sub
	a sh:PropertyShape ;
	sh:path geo:asDGGS ;
	sh:maxCount 1 ;
	sh:message "Each Geometry node can have a maximum of one outgoing geo:asDGGS relation."@en ;
.

#################################################
# Shape 2 (2a-2d) - Geometry / Feature disjoint
#################################################

geosh:S2-a-Geometry
	a sh:NodeShape ;
	sh:targetClass geo:Geometry ;
	sh:property geosh:S2-hasGeometry-hasGeometry-sub ;
.

geosh:S2-b-hasGeometry-hasGeometry
    a sh:NodeShape ;
	sh:targetObjectsOf geo:hasGeometry ;
	sh:property geosh:S2-hasGeometry-hasGeometry-sub ;
.

geosh:S2-c-hasDefaultGeometry-hasGeometry
    a sh:NodeShape ;
	sh:targetObjectsOf geo:hasDefaultGeometry ;
	sh:property geosh:S2-hasGeometry-hasGeometry-sub ;
.

geosh:S2-d-defaultGeometry-hasGeometry
    a sh:NodeShape ;
	sh:targetObjectsOf geo:defaultGeometry ;
	sh:property geosh:S2-hasGeometry-hasGeometry-sub ;
.

geosh:S2-hasGeometry-hasGeometry-sub
	a sh:PropertyShape ;
	sh:path [
		sh:alternativePath (
			geo:hasGeometry
			geo:hasDefaultGeometry
			geo:defaultGeometry
		)
	] ;
	sh:maxCount 0 ;
	sh:message "A Geometry node cannot have an outgoing geo:hasGeometry property, or a specialization of it, since a geo:Geometry cannot be a geo:Feature and entialment of geo:hasGeometry would make it so."@en ;
	skos:example
		"""
		# A valid example: the Resource instance <resource-x-geom1> has an incoming geo:hasGeometry property and no outgoing geo:hasGeometry or specialization of it
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-x> geo:hasGeometry <resource-x-geom1> .
		<resource-x-geom1> geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral .
		""" ,
		"""
		# An invalid example: the Resource instance <resource-x> has both an outgoing and an incoming geo:hasGeometry property (i.e. it's a geo:Feature and a geo:Geometry at the same time)
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-y>
			geo:hasGeometry <resource-x> ;
		.
		<resource-x>
			geo:asWKT "POINT (153.084232 -27.322734)"^^geo:wktLiteral ;
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ,
		"""
		# A valid example: the Resource instance <resource-x-geom1> has an incoming geo:hasDefaultGeometry property and no outgoing geo:hasGeometry or specialization of it
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-x> geo:hasDefaultGeometry <resource-x-geom1> .
		<resource-x-geom1> geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral .
		""" ,
		"""
		# An invalid example: the Resource instance <resource-x> has an incoming geo:hasDefaultGeometry property and an outgoing geo:hasGeometry (i.e. it's a geo:Feature and a geo:Geometry at the same time)
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-y>
			geo:hasDefaultGeometry <resource-x> ;
		.
		<resource-x>
			geo:asWKT "POINT (153.084232 -27.322734)"^^geo:wktLiteral ;
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ;
.

#################################################
# Shape 3 - serializations must be literals
#################################################

geosh:S3-hasSerialization-literal
	a sh:NodeShape ;
	sh:targetObjectsOf
		geo:hasSerialization ,
		geo:asGML ,
		geo:asWKT ,
		geo:asGeoJSON ,
		geo:asKML ,
		geo:asDGGS ;
	sh:nodeKind sh:Literal ;
	sh:message "The target of a geo:hasSerialization property, or a specialization of, it should be an RDF literal."@en ;
	skos:example
		"""
		# A valid example: the target of a geo:asWKT property is an RDF literal
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ,
		"""
		# An invalid example: the target of a geo:asWKT property is not an RDF literal
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-y>
			geo:hasGeometry [
				geo:asWKT <geometry-serialization-node> ;
			] ;
		.
		""" ;
.

#################################################
# Shape 4-5-6-7-8 - serialization datatypes match indicating properties
#################################################

geosh:S4-asWKT-wktLiteral
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asWKT ;
	sh:datatype geo:wktLiteral ;
	sh:message "The target of a geo:asWKT property should be an RDF literal with datatype geo:wktLiteral."@en ;
	skos:example
		"""
		# A valid example: the target of a geo:asWKT property is an RDF literal with datatype geo:wktLiteral
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ,
		"""
		# An invalid example: the target of a geo:asWKT property is not an RDF literal
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-y>
			geo:hasGeometry [
				geo:asWKT <geometry-serialization-node> ;
			] ;
		.
		""" ,
		"""
		# An invalid example: the target of a geo:asWKT property is an RDF literal but with the wrong datatype (xsd:string)
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-z>
			geo:hasGeometry [
				geo:asWKT "POINT (153.084230 -27.322738)" ;
			] ;
		.
		""" ;
.

geosh:S5-asGML-gmlLiteral
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asGML ;
	sh:datatype geo:gmlLiteral ;
	sh:message "The target of a geo:asGML property should be an RDF literal with datatype geo:gmlLiteral."@en ;
.

geosh:S6-asGeoJSON-geoJSONLiteral
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asGeoJSON ;
	sh:datatype geo:geoJSONLiteral ;
	sh:message "The target of a geo:asGeoJSON property should be an RDF literal with datatype geo:geoJSONLiteral."@en ;
.

geosh:S7-asKML-kmlLiteral
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asKML ;
	sh:datatype geo:kmlLiteral ;
	sh:message "The target of a geo:asKML property should be an RDF literal with datatype geo:kmlLiteral."@en ;
.

geosh:S8-asDGGS-dggsLiteral
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asDGGS ;
	sh:property [
		a sh:PropertyShape ;
		sh:path geo:asDGGS ;
		sh:and (
			[
				sh:not [
					sh:datatype geo:wktLiteral ;
				]
			]
			[
				sh:not [
					sh:datatype geo:gmlLiteral ;
				]
			]
			[
				sh:not [
					sh:datatype geo:geoJSONLiteral ;
				]
			]
			[
				sh:not [
					sh:datatype geo:asKML ;
				]
			]
		 ) ;
	] ;
	sh:message "The target of a geo:asDGGS property must not be an RDF literal with datatype of one of the other non-DGGS geometry literal types. It must be eithr geo:dggsLiteral or specialised version of geo:dggsLiteral but this is un-testable so only the excluded type test is performed."@en ;
.

#################################################
# Shape 9-10-11-12-13-14 (14a-14d) - geometry metadata properties can only exist once
#################################################

geosh:S09-many-coordinateDimension-one
	a sh:NodeShape ;
	sh:property geosh:S09-many-coordinateDimension-one-sub ;
	sh:targetSubjectsOf geo:coordinateDimension ;
.

geosh:S09-many-coordinateDimension-one-sub
	a sh:PropertyShape ;
	sh:path geo:coordinateDimension ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:coordinateDimension property."@en ;
	skos:example
		"""
		# A valid example: the subject of a geo:coordinateDimension property has no other properties with the same name
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				geo:coordinateDimension 2 ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ,
		"""
		# An invalid example: the subject of a geo:coordinateDimension property has also another property with with the same property name but a different value
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-y>
			geo:hasGeometry [
				geo:coordinateDimension 2 , 3 ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		""" ;
.

geosh:S10-many-dimension-one
	a sh:NodeShape ;
	sh:property geosh:S10-many-dimension-one-sub ;
	sh:targetSubjectsOf geo:dimension ;
.

geosh:S10-many-dimension-one-sub
	a sh:PropertyShape ;
	sh:path geo:dimension ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:dimension property."@en ;
.

geosh:S11-many-isEmpty-one
	a sh:NodeShape ;
	sh:property geosh:S11-many-isEmpty-one-sub ;
	sh:targetSubjectsOf geo:isEmpty ;
.

geosh:S11-many-isEmpty-one-sub
	a sh:PropertyShape ;
	sh:path geo:isEmpty ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:isEmpty property."@en ;
.

geosh:S12-many-isSimple-one
	a sh:NodeShape ;
	sh:property geosh:S12-many-isSimple-one-sub ;
	sh:targetSubjectsOf geo:isSimple ;
.

geosh:S12-many-isSimple-one-sub
	a sh:PropertyShape ;
	sh:path geo:isSimple ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have a maximum one outgoing geo:isSimple property."@en ;
.

geosh:S13-many-spatialDimension-one
	a sh:NodeShape ;
	sh:property geosh:S13-many-spatialDimension-one-sub ;
	sh:targetSubjectsOf geo:spatialDimension ;
.

geosh:S13-many-spatialDimension-one-sub
	a sh:PropertyShape ;
	sh:path geo:spatialDimension ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:spatialDimension property."@en ;
.

geosh:S14-many-hasSpatialResolution-one
	a sh:NodeShape ;
	sh:property
		geosh:S14-many-hasSpatialResolution-one-sub ,
		geosh:S14-many-hasMetricSpatialResolution-one-sub ;
	sh:targetSubjectsOf
		geo:hasSpatialResolution ,
		geo:hasMetricSpatialResolution ;
.

geosh:S14-many-hasSpatialResolution-one-sub
	a sh:PropertyShape ;
	sh:path geo:hasSpatialResolution ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:hasSpatialResolution property."@en ;
.

geosh:S14-many-hasMetricSpatialResolution-one-sub
	a sh:PropertyShape ;
	sh:path geo:hasMetricSpatialResolution ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:hasMetricSpatialResolution property."@en ;
.

geosh:S15-many-hasSpatialAccuracy-one
	a sh:NodeShape ;
	sh:property
		geosh:S15-many-hasSpatialAccuracy-one-sub ,
		geosh:S15-many-hasMetricSpatialAccuracy-one-sub ;
	sh:targetSubjectsOf
		geo:hasSpatialAccuracy ,
		geo:hasMetricSpatialAccuracy ;
.

geosh:S15-many-hasSpatialAccuracy-one-sub
	a sh:PropertyShape ;
	sh:path geo:hasSpatialAccuracy ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:hasSpatialAccuracy property."@en ;
.

geosh:S15-many-hasMetricSpatialAccuracy-one-sub
	a sh:PropertyShape ;
	sh:path geo:hasMetricSpatialAccuracy ;
	sh:maxCount 1 ;
	sh:message "A geo:Geometry node should have maximum of one outgoing geo:hasMetricSpatialAccuracy."@en ;
.

#################################################
# Shape 16-17-18-19-20 - basic geometry serialization pattern matching
#################################################

geosh:S16-wkt-content
	a sh:NodeShape ;
	sh:property geosh:S16-wkt-content-sub-start ;
	sh:targetSubjectsOf geo:asWKT ;
.

geosh:S16-wkt-content-sub-start
	a sh:PropertyShape ;
	sh:path geo:asWKT ;
	sh:pattern "^\\s*$|^\\s*(M|P|C|S|L|T|<m||p|c|s|l|t)" ; # starts with space, < or P, C etc.
	sh:flags "m" ;
	sh:message "The content of an RDF literal with an incoming geo:asWKT relation must conform to a well-formed WKT string, as defined by its official specification (Simple Features Access)."@en ;
.

geosh:S17-gml-content
	a sh:NodeShape ;
	sh:property geosh:S17-gml-content-sub-start ;
	sh:targetSubjectsOf geo:asGML ;
.

geosh:S17-gml-content-sub-start
	a sh:PropertyShape ;
	sh:path geo:asGML ;
	sh:pattern "^\\s*$|^\\s*(<)(.+)(>)\\s*$" ;  # starts with < ends with >
	sh:flags "m" ;
	sh:message "The content of an RDF literal with an incoming geo:asGML relation must conform to a well-formed GML geometry XML string, as defined by its official specification."@en ;
.

geosh:S18-geojson-content
	a sh:NodeShape ;
	sh:property geosh:S18-geojson-content-sub-start ;
	sh:targetSubjectsOf geo:asGeoJSON ;
.

geosh:S18-geojson-content-sub-start
	a sh:PropertyShape ;
	sh:path geo:asGeoJSON ;
	sh:pattern "^\\s*$|^\\s*({)(.*)(})\\s*$" ;  # starts with { ends with }
	sh:flags "s" ;
	sh:message "The content of an RDF literal with an incoming geo:asGeoJSON relation must conform to a well-formed GeoJSON geometry string, as defined by its official specification."@en ;
.

geosh:S19-kml-content
	a sh:NodeShape ;
	sh:property geosh:S19-kml-content-sub-start ;
	sh:targetSubjectsOf geo:asKML ;
.

geosh:S19-kml-content-sub-start
	a sh:PropertyShape ;
	sh:path geo:asKML ;
	sh:pattern "^\\s*$|^\\s*(<)(.+)(>)\\s*$" ;  # starts with < ends with >
	sh:flags "m" ;
	sh:message "The content of an RDF literal with an incoming geo:asKML relation must conform to a well-formed KML geometry XML string, as defined by its official specification."@en ;
.

geosh:S20-dggs-content
	a sh:NodeShape ;
	sh:property geosh:S20-dggs-content-sub-start ;
	sh:targetSubjectsOf geo:asDGGS ;
	sh:deactivated true ;
	rdfs:comment "This shape is deactivated since the precise syntax of DGGS literals is now known"@en ;
.

geosh:S20-dggs-content-sub-start
	a sh:PropertyShape ;
	sh:path geo:asDGGS ;
	sh:pattern "^$" ;
	sh:message "The content of an RDF literal with an incoming geo:asDGGS relation must conform to DGGS literals, as defined by their specifications."@en ;
	sh:deactivated true ;
	rdfs:comment "This shape is deactivated since the precise syntax of DGGS literals is now known"@en ;
.

#################################################
# Shape 21 - dimension checks
#################################################

geosh:S21-dimension-coordinateDimension
	a sh:NodeShape ;
	sh:property geosh:S21-dimension-coordinateDimension-sub ;
	sh:targetSubjectsOf geo:dimension ;
.

geosh:S21-dimension-coordinateDimension-sub
	a sh:PropertyShape ;
	sh:path geo:coordinateDimension ;
	sh:sparql [
		sh:message "If both geo:dimension and geo:coordinateDimension properties are asserted, the value of geo:dimension should be less than or equal to the value of geo:coordinateDimension"@en ;
		sh:select """
			PREFIX geo: <http://www.opengis.net/ont/geosparql#>
			SELECT $this
			WHERE {
				$this geo:dimension ?dim ;
					geo:coordinateDimension ?coordDim .
				FILTER ( ?dim > ?coordDim )
			}
		""" ;
	] ;
	skos:example
		"""
		# A valid example: the geo:dimension has value is 2 while the geo:coordinateDimension has value 2
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x> geo:hasGeometry <feature-x-geom1> .
		<feature-x-geom1> geo:dimension 2 ;
			geo:coordinateDimension 2 ;
		.
		""" ,
		"""
		# A valid example: the geo:dimension has value is 2 while there is no geo:coordinateDimension
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x> geo:hasGeometry <feature-x-geom1> .
		<feature-x-geom1> geo:dimension 2 ;
		.
		""" ,
		"""
		# An invalid example: the geo:dimension has value is 3 while the geo:coordinateDimension has value 2
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x> geo:hasGeometry <feature-x-geom1> .
		<feature-x-geom1> geo:dimension 3 ;
			geo:coordinateDimension 2 ;
		.
		""" ;
.

#################################################
# Shape 22 - geo:FeatureCollection
#################################################

geosh:S22-FeatureCollectionClass-member-feature
	a sh:NodeShape ;
	sh:property
	    geosh:S22-FeatureCollectionClass-minOneMember-feature-sub ,
	    geosh:S22-FeatureCollectionClass-member-onlyFeature-sub ;
	sh:targetClass geo:FeatureCollection ;
.

geosh:S22-FeatureCollectionClass-minOneMember-feature-sub
	a sh:PropertyShape ;
	sh:path rdfs:member ;
	sh:minCount 1 ;
	sh:message "An instance of geo:FeatureCollection should have at least one outgoing rdfs:member relation."@en ;
	skos:example
		"""
		# A valid example: the geo:FeatureCollection instance node has one outgoing rdfs:member relation
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<featureCollection-x>
		    a geo:FeatureCollection ;
		    rdfs:member <feature-x> ;
		.

		<feature-x>
		    a geo:Feature ;
		    geo:hasGeometry <feature-x-geom1> ;
		.
		""" ,
		"""
		# An invalid example: the geo:FeatureCollection instance node has no outgoing rdfs:member relations
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<featureCollection-x> a geo:FeatureCollection .
		""" ;
.

geosh:S22-FeatureCollectionClass-member-onlyFeature-sub
	a sh:PropertyShape ;
	sh:path rdfs:member ;
	sh:sparql [
		sh:message "An instance of geo:FeatureCollection should only have outgoing rdfs:member going to geo:Feature instances."@en ;
		sh:select """
			PREFIX geo: <http://www.opengis.net/ont/geosparql#>
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			SELECT $this
			WHERE {
				$this rdfs:member ?feature .
				FILTER NOT EXISTS {
					?feature geo:hasGeometry ?geometry .
				}
			}
		""" ;
	] ;
	skos:example
		"""
		# A valid example: the geo:FeatureCollection instance node has one outgoing rdfs:member relation to a geo:Feature node
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<featureCollection-x>
		    a geo:FeatureCollection ;
		    rdfs:member <feature-x>
		.

		<feature-x>
		    a geo:Feature ;
		    geo:hasGeometry <feature-x-geom1> ;
		.
		""" ,
		"""
		# An invalid example: the geo:FeatureCollection instance node has one outgoing rdfs:member relation to a geo:Feature node and another to a geo:Geometry node
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<featureCollection-x>
		    a geo:FeatureCollection ;
		    rdfs:member <featureCollection-x> , <geometry-x> ;
		.

		<feature-x> geo:hasGeometry <feature-x-geom1> .

		<geometry-x> a geo:Geometry .
		""" ;
.

#################################################
# Shape 23 - geo:GeometryCollection
#################################################

geosh:S23-GeometryCollectionClass-member-geometry
	a sh:NodeShape ;
	sh:property
		geosh:S23-GeometryCollectionClass-minOneMember-geometry-sub ,
		geosh:S23-GeometryCollectionClass-member-onlyGeometry-sub ;
	sh:targetClass geo:GeometryCollection ;
.

geosh:S23-GeometryCollectionClass-minOneMember-geometry-sub
	a sh:PropertyShape ;
	sh:path rdfs:member ;
	sh:minCount 1 ;
	sh:message "An instance of geo:GeometryCollection should have at least one outgoing rdfs:member relation."@en ;
	skos:example
		"""
		# A valid example: the geo:GeometryCollection instance node has one incoming rdfs:member relation
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<geometryCollection-x>
		    a geo:GeometryCollection ;
		    rdfs:member <geometry-x> ;
		.

		<feature-x> geo:hasGeometry <geometry-x> .
		""" ,
		"""
		# An invalid example: the geo:GeometryCollection instance node has no outgoing rdfs:member relations
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<geometryCollection-x> a geo:GeometryCollection .
		""" ;
.

geosh:S23-GeometryCollectionClass-member-onlyGeometry-sub
	a sh:PropertyShape ;
	sh:path rdfs:member ;
	sh:sparql [
		sh:message "An instance of geo:GeometryCollection should only have outgoing rdfs:member relations to geo:Geometry instances."@en ;
		sh:select """
			PREFIX geo: <http://www.opengis.net/ont/geosparql#>
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			SELECT $this
			WHERE {
				$this rdfs:member ?geometry .
				FILTER NOT EXISTS {
					?feature geo:hasGeometry ?geometry .
				}
			}
		""" ;
	] ;
	skos:example
		"""
		# A valid example: the geo:GeometryCollection instance node has one outgoing rdfs:member relation to a geo:Geometry node
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<geometryCollection-x>
		    a geo:GeometryCollection ;
		    rdfs:member <geometry-x> ;
		.

		<feature-x> geo:hasGeometry <geometry-x> .
		""" ,
		"""
		# An invalid example: the geo:GeometryCollection instance node has one outgoing rdfs:member relation to geo:Geometry node and one to a non-geo:Geometry node (a geo:Feature)
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		<geometryCollection-x>
		    a geo:GeometryCollection ;
		    rdfs:member <geometry-x> , <feature-x> ;
		.

		<feature-x> geo:hasGeometry <geometry-x> .
		""" ;
.

#################################################
# Shape 24 - geo:SpatialObjectCollection
#################################################

geosh:S24-SpatialObjectCollection-member-spatialObject
	a sh:NodeShape ;
	sh:property
		geosh:S24-SpatialObjectCollection-minOneMember-spatialObject-sub ,
		geosh:S24-SpatialObjectCollection-member-onlySpatialObject-sub ;
	sh:targetClass geo:SpatialObjectCollection ;
.

geosh:S24-SpatialObjectCollection-minOneMember-spatialObject-sub
	a sh:PropertyShape ;
	sh:path rdfs:member ;
	sh:minCount 1 ;
	sh:message "An instance of geo:SpatialObjectCollection should have at least one outgoing rdfs:member relation."@en ;
	skos:example
		"""
		# A valid example: the geo:SpatialObjectCollection instance node has one outgoing rdfs:member relation
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		geosh:spatialObjectCollection-x
		    a geo:SpatialObjectCollection ;
		    rdfs:member <feature-x>
		.

		<feature-x> geo:hasGeometry <geometry-x> .
		""" ,
		"""
		# An invalid example: the geo:SpatialObjectCollection instance node has no incoming rdfs:member relations
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		geosh:spatialObjectCollection-x
		    a geo:SpatialObjectCollection ;
		.
		""" ;
.

geosh:S24-SpatialObjectCollection-member-onlySpatialObject-sub
	a sh:PropertyShape ;
	sh:path rdfs:member ;
	sh:sparql [
		sh:message "An instance of geo:SpatialObjectCollection should only have outgoing rdfs:member relations going to geo:SpatialObject instances, or subclasses of them."@en ;
		sh:select """
			PREFIX geo: <http://www.opengis.net/ont/geosparql#>
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			SELECT $this
			WHERE {
				$this rdfs:member ?spatialObject .
				FILTER NOT EXISTS {
					?spatialObject geo:hasGeometry|^geo:hasGeometry ?geometryOrFeature .
				}
			}
		""" ;
	] ;
	skos:example
		"""
		# A valid example: the geo:SpatialObjectCollection instance node has one outgoing rdfs:member relation to a geo:Geometry node and one to a geo:Feature node
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		geosh:spatialObjectCollection-x
		    a geo:SpatialObjectCollection ;
		    rdfs:member <geometry-x> , <feature-y> ;
		.

		<feature-x> geo:hasGeometry <geometry-x> .
		<feature-y> geo:hasGeometry <geometry-y> .
		""" ,
		"""
		# An invalid example: the geo:SpatialObjectCollection instance node has one outgoing rdfs:member relation to a geo:Geometry node, one outgoing rdfs:member relation to a geo:Feature node and a third outgoing rdfs:member relation from a node of another type (ex:Thing)
		@prefix ex: <http://example.com/> .
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

		geosh:spatialObjectCollection-x
		    a geo:SpatialObjectCollection ;
		    rdfs:member <geometry-x> , <feature-y> , <thing-x> ;
		.

		<thing-x> a ex:Thing .
		<feature-x> geo:hasGeometry <geometry-x> .
		<feature-y> geo:hasGeometry <geometry-y> .
		""" ;
.
